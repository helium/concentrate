// This file is generated by rust-protobuf 2.6.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct LongFiReq {
    // message fields
    pub id: u32,
    // message oneof groups
    pub kind: ::std::option::Option<LongFiReq_oneof_kind>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LongFiReq {
    fn default() -> &'a LongFiReq {
        <LongFiReq as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum LongFiReq_oneof_kind {
    longfi_tx_uplink(LongFiTxUplinkPacket),
}

impl LongFiReq {
    pub fn new() -> LongFiReq {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // .helium.longfi.LongFiTxUplinkPacket longfi_tx_uplink = 2;


    pub fn get_longfi_tx_uplink(&self) -> &LongFiTxUplinkPacket {
        match self.kind {
            ::std::option::Option::Some(LongFiReq_oneof_kind::longfi_tx_uplink(ref v)) => v,
            _ => LongFiTxUplinkPacket::default_instance(),
        }
    }
    pub fn clear_longfi_tx_uplink(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_longfi_tx_uplink(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(LongFiReq_oneof_kind::longfi_tx_uplink(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_longfi_tx_uplink(&mut self, v: LongFiTxUplinkPacket) {
        self.kind = ::std::option::Option::Some(LongFiReq_oneof_kind::longfi_tx_uplink(v))
    }

    // Mutable pointer to the field.
    pub fn mut_longfi_tx_uplink(&mut self) -> &mut LongFiTxUplinkPacket {
        if let ::std::option::Option::Some(LongFiReq_oneof_kind::longfi_tx_uplink(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(LongFiReq_oneof_kind::longfi_tx_uplink(LongFiTxUplinkPacket::new()));
        }
        match self.kind {
            ::std::option::Option::Some(LongFiReq_oneof_kind::longfi_tx_uplink(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_longfi_tx_uplink(&mut self) -> LongFiTxUplinkPacket {
        if self.has_longfi_tx_uplink() {
            match self.kind.take() {
                ::std::option::Option::Some(LongFiReq_oneof_kind::longfi_tx_uplink(v)) => v,
                _ => panic!(),
            }
        } else {
            LongFiTxUplinkPacket::new()
        }
    }
}

impl ::protobuf::Message for LongFiReq {
    fn is_initialized(&self) -> bool {
        if let Some(LongFiReq_oneof_kind::longfi_tx_uplink(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(LongFiReq_oneof_kind::longfi_tx_uplink(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &LongFiReq_oneof_kind::longfi_tx_uplink(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &LongFiReq_oneof_kind::longfi_tx_uplink(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LongFiReq {
        LongFiReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "id",
                    |m: &LongFiReq| { &m.id },
                    |m: &mut LongFiReq| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LongFiTxUplinkPacket>(
                    "longfi_tx_uplink",
                    LongFiReq::has_longfi_tx_uplink,
                    LongFiReq::get_longfi_tx_uplink,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LongFiReq>(
                    "LongFiReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LongFiReq {
        static mut instance: ::protobuf::lazy::Lazy<LongFiReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LongFiReq,
        };
        unsafe {
            instance.get(LongFiReq::new)
        }
    }
}

impl ::protobuf::Clear for LongFiReq {
    fn clear(&mut self) {
        self.id = 0;
        self.kind = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LongFiReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LongFiReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LongFiResp {
    // message fields
    pub id: u32,
    // message oneof groups
    pub kind: ::std::option::Option<LongFiResp_oneof_kind>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LongFiResp {
    fn default() -> &'a LongFiResp {
        <LongFiResp as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum LongFiResp_oneof_kind {
    tx(LongFiTxResp),
    longfi_rx(LongFiRxPacket),
    parse_err(::std::vec::Vec<u8>),
}

impl LongFiResp {
    pub fn new() -> LongFiResp {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // .helium.longfi.LongFiTxResp tx = 2;


    pub fn get_tx(&self) -> &LongFiTxResp {
        match self.kind {
            ::std::option::Option::Some(LongFiResp_oneof_kind::tx(ref v)) => v,
            _ => LongFiTxResp::default_instance(),
        }
    }
    pub fn clear_tx(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_tx(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(LongFiResp_oneof_kind::tx(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tx(&mut self, v: LongFiTxResp) {
        self.kind = ::std::option::Option::Some(LongFiResp_oneof_kind::tx(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tx(&mut self) -> &mut LongFiTxResp {
        if let ::std::option::Option::Some(LongFiResp_oneof_kind::tx(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(LongFiResp_oneof_kind::tx(LongFiTxResp::new()));
        }
        match self.kind {
            ::std::option::Option::Some(LongFiResp_oneof_kind::tx(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tx(&mut self) -> LongFiTxResp {
        if self.has_tx() {
            match self.kind.take() {
                ::std::option::Option::Some(LongFiResp_oneof_kind::tx(v)) => v,
                _ => panic!(),
            }
        } else {
            LongFiTxResp::new()
        }
    }

    // .helium.longfi.LongFiRxPacket longfi_rx = 3;


    pub fn get_longfi_rx(&self) -> &LongFiRxPacket {
        match self.kind {
            ::std::option::Option::Some(LongFiResp_oneof_kind::longfi_rx(ref v)) => v,
            _ => LongFiRxPacket::default_instance(),
        }
    }
    pub fn clear_longfi_rx(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_longfi_rx(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(LongFiResp_oneof_kind::longfi_rx(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_longfi_rx(&mut self, v: LongFiRxPacket) {
        self.kind = ::std::option::Option::Some(LongFiResp_oneof_kind::longfi_rx(v))
    }

    // Mutable pointer to the field.
    pub fn mut_longfi_rx(&mut self) -> &mut LongFiRxPacket {
        if let ::std::option::Option::Some(LongFiResp_oneof_kind::longfi_rx(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(LongFiResp_oneof_kind::longfi_rx(LongFiRxPacket::new()));
        }
        match self.kind {
            ::std::option::Option::Some(LongFiResp_oneof_kind::longfi_rx(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_longfi_rx(&mut self) -> LongFiRxPacket {
        if self.has_longfi_rx() {
            match self.kind.take() {
                ::std::option::Option::Some(LongFiResp_oneof_kind::longfi_rx(v)) => v,
                _ => panic!(),
            }
        } else {
            LongFiRxPacket::new()
        }
    }

    // bytes parse_err = 4;


    pub fn get_parse_err(&self) -> &[u8] {
        match self.kind {
            ::std::option::Option::Some(LongFiResp_oneof_kind::parse_err(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_parse_err(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_parse_err(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(LongFiResp_oneof_kind::parse_err(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_parse_err(&mut self, v: ::std::vec::Vec<u8>) {
        self.kind = ::std::option::Option::Some(LongFiResp_oneof_kind::parse_err(v))
    }

    // Mutable pointer to the field.
    pub fn mut_parse_err(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(LongFiResp_oneof_kind::parse_err(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(LongFiResp_oneof_kind::parse_err(::std::vec::Vec::new()));
        }
        match self.kind {
            ::std::option::Option::Some(LongFiResp_oneof_kind::parse_err(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_parse_err(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_parse_err() {
            match self.kind.take() {
                ::std::option::Option::Some(LongFiResp_oneof_kind::parse_err(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }
}

impl ::protobuf::Message for LongFiResp {
    fn is_initialized(&self) -> bool {
        if let Some(LongFiResp_oneof_kind::tx(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(LongFiResp_oneof_kind::longfi_rx(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(LongFiResp_oneof_kind::tx(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(LongFiResp_oneof_kind::longfi_rx(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(LongFiResp_oneof_kind::parse_err(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &LongFiResp_oneof_kind::tx(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &LongFiResp_oneof_kind::longfi_rx(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &LongFiResp_oneof_kind::parse_err(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(4, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &LongFiResp_oneof_kind::tx(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &LongFiResp_oneof_kind::longfi_rx(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &LongFiResp_oneof_kind::parse_err(ref v) => {
                    os.write_bytes(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LongFiResp {
        LongFiResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "id",
                    |m: &LongFiResp| { &m.id },
                    |m: &mut LongFiResp| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LongFiTxResp>(
                    "tx",
                    LongFiResp::has_tx,
                    LongFiResp::get_tx,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LongFiRxPacket>(
                    "longfi_rx",
                    LongFiResp::has_longfi_rx,
                    LongFiResp::get_longfi_rx,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "parse_err",
                    LongFiResp::has_parse_err,
                    LongFiResp::get_parse_err,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LongFiResp>(
                    "LongFiResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LongFiResp {
        static mut instance: ::protobuf::lazy::Lazy<LongFiResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LongFiResp,
        };
        unsafe {
            instance.get(LongFiResp::new)
        }
    }
}

impl ::protobuf::Clear for LongFiResp {
    fn clear(&mut self) {
        self.id = 0;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LongFiResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LongFiResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LongFiTxResp {
    // message fields
    pub success: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LongFiTxResp {
    fn default() -> &'a LongFiTxResp {
        <LongFiTxResp as ::protobuf::Message>::default_instance()
    }
}

impl LongFiTxResp {
    pub fn new() -> LongFiTxResp {
        ::std::default::Default::default()
    }

    // bool success = 1;


    pub fn get_success(&self) -> bool {
        self.success
    }
    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }
}

impl ::protobuf::Message for LongFiTxResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LongFiTxResp {
        LongFiTxResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "success",
                    |m: &LongFiTxResp| { &m.success },
                    |m: &mut LongFiTxResp| { &mut m.success },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LongFiTxResp>(
                    "LongFiTxResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LongFiTxResp {
        static mut instance: ::protobuf::lazy::Lazy<LongFiTxResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LongFiTxResp,
        };
        unsafe {
            instance.get(LongFiTxResp::new)
        }
    }
}

impl ::protobuf::Clear for LongFiTxResp {
    fn clear(&mut self) {
        self.success = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LongFiTxResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LongFiTxResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LongFiRxPacket {
    // message fields
    pub crc_check: bool,
    pub timestamp: u64,
    pub rssi: f32,
    pub snr: f32,
    pub oui: u32,
    pub device_id: u32,
    pub mac: u32,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LongFiRxPacket {
    fn default() -> &'a LongFiRxPacket {
        <LongFiRxPacket as ::protobuf::Message>::default_instance()
    }
}

impl LongFiRxPacket {
    pub fn new() -> LongFiRxPacket {
        ::std::default::Default::default()
    }

    // bool crc_check = 1;


    pub fn get_crc_check(&self) -> bool {
        self.crc_check
    }
    pub fn clear_crc_check(&mut self) {
        self.crc_check = false;
    }

    // Param is passed by value, moved
    pub fn set_crc_check(&mut self, v: bool) {
        self.crc_check = v;
    }

    // uint64 timestamp = 2;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // float rssi = 3;


    pub fn get_rssi(&self) -> f32 {
        self.rssi
    }
    pub fn clear_rssi(&mut self) {
        self.rssi = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rssi(&mut self, v: f32) {
        self.rssi = v;
    }

    // float snr = 4;


    pub fn get_snr(&self) -> f32 {
        self.snr
    }
    pub fn clear_snr(&mut self) {
        self.snr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_snr(&mut self, v: f32) {
        self.snr = v;
    }

    // uint32 oui = 5;


    pub fn get_oui(&self) -> u32 {
        self.oui
    }
    pub fn clear_oui(&mut self) {
        self.oui = 0;
    }

    // Param is passed by value, moved
    pub fn set_oui(&mut self, v: u32) {
        self.oui = v;
    }

    // uint32 device_id = 6;


    pub fn get_device_id(&self) -> u32 {
        self.device_id
    }
    pub fn clear_device_id(&mut self) {
        self.device_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_device_id(&mut self, v: u32) {
        self.device_id = v;
    }

    // uint32 mac = 7;


    pub fn get_mac(&self) -> u32 {
        self.mac
    }
    pub fn clear_mac(&mut self) {
        self.mac = 0;
    }

    // Param is passed by value, moved
    pub fn set_mac(&mut self, v: u32) {
        self.mac = v;
    }

    // bytes payload = 8;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for LongFiRxPacket {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.crc_check = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.rssi = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.snr = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.oui = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.device_id = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mac = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.crc_check != false {
            my_size += 2;
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(2, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rssi != 0. {
            my_size += 5;
        }
        if self.snr != 0. {
            my_size += 5;
        }
        if self.oui != 0 {
            my_size += ::protobuf::rt::value_size(5, self.oui, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.device_id != 0 {
            my_size += ::protobuf::rt::value_size(6, self.device_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mac != 0 {
            my_size += ::protobuf::rt::value_size(7, self.mac, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.crc_check != false {
            os.write_bool(1, self.crc_check)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(2, self.timestamp)?;
        }
        if self.rssi != 0. {
            os.write_float(3, self.rssi)?;
        }
        if self.snr != 0. {
            os.write_float(4, self.snr)?;
        }
        if self.oui != 0 {
            os.write_uint32(5, self.oui)?;
        }
        if self.device_id != 0 {
            os.write_uint32(6, self.device_id)?;
        }
        if self.mac != 0 {
            os.write_uint32(7, self.mac)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(8, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LongFiRxPacket {
        LongFiRxPacket::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "crc_check",
                    |m: &LongFiRxPacket| { &m.crc_check },
                    |m: &mut LongFiRxPacket| { &mut m.crc_check },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &LongFiRxPacket| { &m.timestamp },
                    |m: &mut LongFiRxPacket| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "rssi",
                    |m: &LongFiRxPacket| { &m.rssi },
                    |m: &mut LongFiRxPacket| { &mut m.rssi },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "snr",
                    |m: &LongFiRxPacket| { &m.snr },
                    |m: &mut LongFiRxPacket| { &mut m.snr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "oui",
                    |m: &LongFiRxPacket| { &m.oui },
                    |m: &mut LongFiRxPacket| { &mut m.oui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "device_id",
                    |m: &LongFiRxPacket| { &m.device_id },
                    |m: &mut LongFiRxPacket| { &mut m.device_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "mac",
                    |m: &LongFiRxPacket| { &m.mac },
                    |m: &mut LongFiRxPacket| { &mut m.mac },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &LongFiRxPacket| { &m.payload },
                    |m: &mut LongFiRxPacket| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LongFiRxPacket>(
                    "LongFiRxPacket",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LongFiRxPacket {
        static mut instance: ::protobuf::lazy::Lazy<LongFiRxPacket> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LongFiRxPacket,
        };
        unsafe {
            instance.get(LongFiRxPacket::new)
        }
    }
}

impl ::protobuf::Clear for LongFiRxPacket {
    fn clear(&mut self) {
        self.crc_check = false;
        self.timestamp = 0;
        self.rssi = 0.;
        self.snr = 0.;
        self.oui = 0;
        self.device_id = 0;
        self.mac = 0;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LongFiRxPacket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LongFiRxPacket {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LongFiTxUplinkPacket {
    // message fields
    pub disable_encoding: bool,
    pub disable_fragmentation: bool,
    pub oui: u32,
    pub device_id: u32,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LongFiTxUplinkPacket {
    fn default() -> &'a LongFiTxUplinkPacket {
        <LongFiTxUplinkPacket as ::protobuf::Message>::default_instance()
    }
}

impl LongFiTxUplinkPacket {
    pub fn new() -> LongFiTxUplinkPacket {
        ::std::default::Default::default()
    }

    // bool disable_encoding = 1;


    pub fn get_disable_encoding(&self) -> bool {
        self.disable_encoding
    }
    pub fn clear_disable_encoding(&mut self) {
        self.disable_encoding = false;
    }

    // Param is passed by value, moved
    pub fn set_disable_encoding(&mut self, v: bool) {
        self.disable_encoding = v;
    }

    // bool disable_fragmentation = 2;


    pub fn get_disable_fragmentation(&self) -> bool {
        self.disable_fragmentation
    }
    pub fn clear_disable_fragmentation(&mut self) {
        self.disable_fragmentation = false;
    }

    // Param is passed by value, moved
    pub fn set_disable_fragmentation(&mut self, v: bool) {
        self.disable_fragmentation = v;
    }

    // uint32 oui = 3;


    pub fn get_oui(&self) -> u32 {
        self.oui
    }
    pub fn clear_oui(&mut self) {
        self.oui = 0;
    }

    // Param is passed by value, moved
    pub fn set_oui(&mut self, v: u32) {
        self.oui = v;
    }

    // uint32 device_id = 4;


    pub fn get_device_id(&self) -> u32 {
        self.device_id
    }
    pub fn clear_device_id(&mut self) {
        self.device_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_device_id(&mut self, v: u32) {
        self.device_id = v;
    }

    // bytes payload = 5;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for LongFiTxUplinkPacket {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disable_encoding = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disable_fragmentation = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.oui = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.device_id = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.disable_encoding != false {
            my_size += 2;
        }
        if self.disable_fragmentation != false {
            my_size += 2;
        }
        if self.oui != 0 {
            my_size += ::protobuf::rt::value_size(3, self.oui, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.device_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.device_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.disable_encoding != false {
            os.write_bool(1, self.disable_encoding)?;
        }
        if self.disable_fragmentation != false {
            os.write_bool(2, self.disable_fragmentation)?;
        }
        if self.oui != 0 {
            os.write_uint32(3, self.oui)?;
        }
        if self.device_id != 0 {
            os.write_uint32(4, self.device_id)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(5, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LongFiTxUplinkPacket {
        LongFiTxUplinkPacket::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "disable_encoding",
                    |m: &LongFiTxUplinkPacket| { &m.disable_encoding },
                    |m: &mut LongFiTxUplinkPacket| { &mut m.disable_encoding },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "disable_fragmentation",
                    |m: &LongFiTxUplinkPacket| { &m.disable_fragmentation },
                    |m: &mut LongFiTxUplinkPacket| { &mut m.disable_fragmentation },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "oui",
                    |m: &LongFiTxUplinkPacket| { &m.oui },
                    |m: &mut LongFiTxUplinkPacket| { &mut m.oui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "device_id",
                    |m: &LongFiTxUplinkPacket| { &m.device_id },
                    |m: &mut LongFiTxUplinkPacket| { &mut m.device_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &LongFiTxUplinkPacket| { &m.payload },
                    |m: &mut LongFiTxUplinkPacket| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LongFiTxUplinkPacket>(
                    "LongFiTxUplinkPacket",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LongFiTxUplinkPacket {
        static mut instance: ::protobuf::lazy::Lazy<LongFiTxUplinkPacket> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LongFiTxUplinkPacket,
        };
        unsafe {
            instance.get(LongFiTxUplinkPacket::new)
        }
    }
}

impl ::protobuf::Clear for LongFiTxUplinkPacket {
    fn clear(&mut self) {
        self.disable_encoding = false;
        self.disable_fragmentation = false;
        self.oui = 0;
        self.device_id = 0;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LongFiTxUplinkPacket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LongFiTxUplinkPacket {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10src/longfi.proto\x12\rhelium.longfi\"f\n\tLongFiReq\x12\x0c\n\x02i\
    d\x18\x01\x20\x01(\rB\0\x12A\n\x10longfi_tx_uplink\x18\x02\x20\x01(\x0b2\
    #.helium.longfi.LongFiTxUplinkPacketH\0B\0B\x06\n\x04kind:\0\"\x9e\x01\n\
    \nLongFiResp\x12\x0c\n\x02id\x18\x01\x20\x01(\rB\0\x12+\n\x02tx\x18\x02\
    \x20\x01(\x0b2\x1b.helium.longfi.LongFiTxRespH\0B\0\x124\n\tlongfi_rx\
    \x18\x03\x20\x01(\x0b2\x1d.helium.longfi.LongFiRxPacketH\0B\0\x12\x15\n\
    \tparse_err\x18\x04\x20\x01(\x0cH\0B\0B\x06\n\x04kind:\0\"#\n\x0cLongFiT\
    xResp\x12\x11\n\x07success\x18\x01\x20\x01(\x08B\0:\0\"\xa1\x01\n\x0eLon\
    gFiRxPacket\x12\x13\n\tcrc_check\x18\x01\x20\x01(\x08B\0\x12\x13\n\ttime\
    stamp\x18\x02\x20\x01(\x04B\0\x12\x0e\n\x04rssi\x18\x03\x20\x01(\x02B\0\
    \x12\r\n\x03snr\x18\x04\x20\x01(\x02B\0\x12\r\n\x03oui\x18\x05\x20\x01(\
    \rB\0\x12\x13\n\tdevice_id\x18\x06\x20\x01(\rB\0\x12\r\n\x03mac\x18\x07\
    \x20\x01(\rB\0\x12\x11\n\x07payload\x18\x08\x20\x01(\x0cB\0:\0\"\x8c\x01\
    \n\x14LongFiTxUplinkPacket\x12\x1a\n\x10disable_encoding\x18\x01\x20\x01\
    (\x08B\0\x12\x1f\n\x15disable_fragmentation\x18\x02\x20\x01(\x08B\0\x12\
    \r\n\x03oui\x18\x03\x20\x01(\rB\0\x12\x13\n\tdevice_id\x18\x04\x20\x01(\
    \rB\0\x12\x11\n\x07payload\x18\x05\x20\x01(\x0cB\0:\0B\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
