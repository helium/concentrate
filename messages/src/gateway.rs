// This file is generated by rust-protobuf 2.6.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct RxPacket {
    // message fields
    pub freq: u32,
    pub if_chain: u32,
    pub crc_check: bool,
    pub timestamp: u64,
    pub radio: Radio,
    pub bandwidth: Bandwidth,
    pub spreading: Spreading,
    pub coderate: Coderate,
    pub rssi: f32,
    pub snr: f32,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RxPacket {
    fn default() -> &'a RxPacket {
        <RxPacket as ::protobuf::Message>::default_instance()
    }
}

impl RxPacket {
    pub fn new() -> RxPacket {
        ::std::default::Default::default()
    }

    // uint32 freq = 1;


    pub fn get_freq(&self) -> u32 {
        self.freq
    }
    pub fn clear_freq(&mut self) {
        self.freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_freq(&mut self, v: u32) {
        self.freq = v;
    }

    // uint32 if_chain = 2;


    pub fn get_if_chain(&self) -> u32 {
        self.if_chain
    }
    pub fn clear_if_chain(&mut self) {
        self.if_chain = 0;
    }

    // Param is passed by value, moved
    pub fn set_if_chain(&mut self, v: u32) {
        self.if_chain = v;
    }

    // bool crc_check = 3;


    pub fn get_crc_check(&self) -> bool {
        self.crc_check
    }
    pub fn clear_crc_check(&mut self) {
        self.crc_check = false;
    }

    // Param is passed by value, moved
    pub fn set_crc_check(&mut self, v: bool) {
        self.crc_check = v;
    }

    // uint64 timestamp = 4;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // .Radio radio = 5;


    pub fn get_radio(&self) -> Radio {
        self.radio
    }
    pub fn clear_radio(&mut self) {
        self.radio = Radio::R0;
    }

    // Param is passed by value, moved
    pub fn set_radio(&mut self, v: Radio) {
        self.radio = v;
    }

    // .Bandwidth bandwidth = 6;


    pub fn get_bandwidth(&self) -> Bandwidth {
        self.bandwidth
    }
    pub fn clear_bandwidth(&mut self) {
        self.bandwidth = Bandwidth::UNDEFINED;
    }

    // Param is passed by value, moved
    pub fn set_bandwidth(&mut self, v: Bandwidth) {
        self.bandwidth = v;
    }

    // .Spreading spreading = 7;


    pub fn get_spreading(&self) -> Spreading {
        self.spreading
    }
    pub fn clear_spreading(&mut self) {
        self.spreading = Spreading::UNDEFINED;
    }

    // Param is passed by value, moved
    pub fn set_spreading(&mut self, v: Spreading) {
        self.spreading = v;
    }

    // .Coderate coderate = 8;


    pub fn get_coderate(&self) -> Coderate {
        self.coderate
    }
    pub fn clear_coderate(&mut self) {
        self.coderate = Coderate::UNDEFINED;
    }

    // Param is passed by value, moved
    pub fn set_coderate(&mut self, v: Coderate) {
        self.coderate = v;
    }

    // float rssi = 9;


    pub fn get_rssi(&self) -> f32 {
        self.rssi
    }
    pub fn clear_rssi(&mut self) {
        self.rssi = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rssi(&mut self, v: f32) {
        self.rssi = v;
    }

    // float snr = 10;


    pub fn get_snr(&self) -> f32 {
        self.snr
    }
    pub fn clear_snr(&mut self) {
        self.snr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_snr(&mut self, v: f32) {
        self.snr = v;
    }

    // bytes payload = 11;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RxPacket {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.freq = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.if_chain = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.crc_check = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.radio, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.bandwidth, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.spreading, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.coderate, 8, &mut self.unknown_fields)?
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.rssi = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.snr = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.freq != 0 {
            my_size += ::protobuf::rt::value_size(1, self.freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.if_chain != 0 {
            my_size += ::protobuf::rt::value_size(2, self.if_chain, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.crc_check != false {
            my_size += 2;
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(4, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.radio != Radio::R0 {
            my_size += ::protobuf::rt::enum_size(5, self.radio);
        }
        if self.bandwidth != Bandwidth::UNDEFINED {
            my_size += ::protobuf::rt::enum_size(6, self.bandwidth);
        }
        if self.spreading != Spreading::UNDEFINED {
            my_size += ::protobuf::rt::enum_size(7, self.spreading);
        }
        if self.coderate != Coderate::UNDEFINED {
            my_size += ::protobuf::rt::enum_size(8, self.coderate);
        }
        if self.rssi != 0. {
            my_size += 5;
        }
        if self.snr != 0. {
            my_size += 5;
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.freq != 0 {
            os.write_uint32(1, self.freq)?;
        }
        if self.if_chain != 0 {
            os.write_uint32(2, self.if_chain)?;
        }
        if self.crc_check != false {
            os.write_bool(3, self.crc_check)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(4, self.timestamp)?;
        }
        if self.radio != Radio::R0 {
            os.write_enum(5, self.radio.value())?;
        }
        if self.bandwidth != Bandwidth::UNDEFINED {
            os.write_enum(6, self.bandwidth.value())?;
        }
        if self.spreading != Spreading::UNDEFINED {
            os.write_enum(7, self.spreading.value())?;
        }
        if self.coderate != Coderate::UNDEFINED {
            os.write_enum(8, self.coderate.value())?;
        }
        if self.rssi != 0. {
            os.write_float(9, self.rssi)?;
        }
        if self.snr != 0. {
            os.write_float(10, self.snr)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(11, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RxPacket {
        RxPacket::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "freq",
                    |m: &RxPacket| { &m.freq },
                    |m: &mut RxPacket| { &mut m.freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "if_chain",
                    |m: &RxPacket| { &m.if_chain },
                    |m: &mut RxPacket| { &mut m.if_chain },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "crc_check",
                    |m: &RxPacket| { &m.crc_check },
                    |m: &mut RxPacket| { &mut m.crc_check },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &RxPacket| { &m.timestamp },
                    |m: &mut RxPacket| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Radio>>(
                    "radio",
                    |m: &RxPacket| { &m.radio },
                    |m: &mut RxPacket| { &mut m.radio },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Bandwidth>>(
                    "bandwidth",
                    |m: &RxPacket| { &m.bandwidth },
                    |m: &mut RxPacket| { &mut m.bandwidth },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Spreading>>(
                    "spreading",
                    |m: &RxPacket| { &m.spreading },
                    |m: &mut RxPacket| { &mut m.spreading },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Coderate>>(
                    "coderate",
                    |m: &RxPacket| { &m.coderate },
                    |m: &mut RxPacket| { &mut m.coderate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "rssi",
                    |m: &RxPacket| { &m.rssi },
                    |m: &mut RxPacket| { &mut m.rssi },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "snr",
                    |m: &RxPacket| { &m.snr },
                    |m: &mut RxPacket| { &mut m.snr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &RxPacket| { &m.payload },
                    |m: &mut RxPacket| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RxPacket>(
                    "RxPacket",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RxPacket {
        static mut instance: ::protobuf::lazy::Lazy<RxPacket> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RxPacket,
        };
        unsafe {
            instance.get(RxPacket::new)
        }
    }
}

impl ::protobuf::Clear for RxPacket {
    fn clear(&mut self) {
        self.freq = 0;
        self.if_chain = 0;
        self.crc_check = false;
        self.timestamp = 0;
        self.radio = Radio::R0;
        self.bandwidth = Bandwidth::UNDEFINED;
        self.spreading = Spreading::UNDEFINED;
        self.coderate = Coderate::UNDEFINED;
        self.rssi = 0.;
        self.snr = 0.;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RxPacket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RxPacket {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TxPacket {
    // message fields
    pub freq: u32,
    pub radio: Radio,
    pub power: i32,
    pub bandwidth: Bandwidth,
    pub spreading: Spreading,
    pub coderate: Coderate,
    pub invert_polarity: bool,
    pub omit_crc: bool,
    pub implicit_header: bool,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TxPacket {
    fn default() -> &'a TxPacket {
        <TxPacket as ::protobuf::Message>::default_instance()
    }
}

impl TxPacket {
    pub fn new() -> TxPacket {
        ::std::default::Default::default()
    }

    // uint32 freq = 1;


    pub fn get_freq(&self) -> u32 {
        self.freq
    }
    pub fn clear_freq(&mut self) {
        self.freq = 0;
    }

    // Param is passed by value, moved
    pub fn set_freq(&mut self, v: u32) {
        self.freq = v;
    }

    // .Radio radio = 2;


    pub fn get_radio(&self) -> Radio {
        self.radio
    }
    pub fn clear_radio(&mut self) {
        self.radio = Radio::R0;
    }

    // Param is passed by value, moved
    pub fn set_radio(&mut self, v: Radio) {
        self.radio = v;
    }

    // int32 power = 3;


    pub fn get_power(&self) -> i32 {
        self.power
    }
    pub fn clear_power(&mut self) {
        self.power = 0;
    }

    // Param is passed by value, moved
    pub fn set_power(&mut self, v: i32) {
        self.power = v;
    }

    // .Bandwidth bandwidth = 4;


    pub fn get_bandwidth(&self) -> Bandwidth {
        self.bandwidth
    }
    pub fn clear_bandwidth(&mut self) {
        self.bandwidth = Bandwidth::UNDEFINED;
    }

    // Param is passed by value, moved
    pub fn set_bandwidth(&mut self, v: Bandwidth) {
        self.bandwidth = v;
    }

    // .Spreading spreading = 5;


    pub fn get_spreading(&self) -> Spreading {
        self.spreading
    }
    pub fn clear_spreading(&mut self) {
        self.spreading = Spreading::UNDEFINED;
    }

    // Param is passed by value, moved
    pub fn set_spreading(&mut self, v: Spreading) {
        self.spreading = v;
    }

    // .Coderate coderate = 6;


    pub fn get_coderate(&self) -> Coderate {
        self.coderate
    }
    pub fn clear_coderate(&mut self) {
        self.coderate = Coderate::UNDEFINED;
    }

    // Param is passed by value, moved
    pub fn set_coderate(&mut self, v: Coderate) {
        self.coderate = v;
    }

    // bool invert_polarity = 7;


    pub fn get_invert_polarity(&self) -> bool {
        self.invert_polarity
    }
    pub fn clear_invert_polarity(&mut self) {
        self.invert_polarity = false;
    }

    // Param is passed by value, moved
    pub fn set_invert_polarity(&mut self, v: bool) {
        self.invert_polarity = v;
    }

    // bool omit_crc = 8;


    pub fn get_omit_crc(&self) -> bool {
        self.omit_crc
    }
    pub fn clear_omit_crc(&mut self) {
        self.omit_crc = false;
    }

    // Param is passed by value, moved
    pub fn set_omit_crc(&mut self, v: bool) {
        self.omit_crc = v;
    }

    // bool implicit_header = 9;


    pub fn get_implicit_header(&self) -> bool {
        self.implicit_header
    }
    pub fn clear_implicit_header(&mut self) {
        self.implicit_header = false;
    }

    // Param is passed by value, moved
    pub fn set_implicit_header(&mut self, v: bool) {
        self.implicit_header = v;
    }

    // bytes payload = 10;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for TxPacket {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.freq = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.radio, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.power = tmp;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.bandwidth, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.spreading, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.coderate, 6, &mut self.unknown_fields)?
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.invert_polarity = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.omit_crc = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.implicit_header = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.freq != 0 {
            my_size += ::protobuf::rt::value_size(1, self.freq, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.radio != Radio::R0 {
            my_size += ::protobuf::rt::enum_size(2, self.radio);
        }
        if self.power != 0 {
            my_size += ::protobuf::rt::value_size(3, self.power, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bandwidth != Bandwidth::UNDEFINED {
            my_size += ::protobuf::rt::enum_size(4, self.bandwidth);
        }
        if self.spreading != Spreading::UNDEFINED {
            my_size += ::protobuf::rt::enum_size(5, self.spreading);
        }
        if self.coderate != Coderate::UNDEFINED {
            my_size += ::protobuf::rt::enum_size(6, self.coderate);
        }
        if self.invert_polarity != false {
            my_size += 2;
        }
        if self.omit_crc != false {
            my_size += 2;
        }
        if self.implicit_header != false {
            my_size += 2;
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.freq != 0 {
            os.write_uint32(1, self.freq)?;
        }
        if self.radio != Radio::R0 {
            os.write_enum(2, self.radio.value())?;
        }
        if self.power != 0 {
            os.write_int32(3, self.power)?;
        }
        if self.bandwidth != Bandwidth::UNDEFINED {
            os.write_enum(4, self.bandwidth.value())?;
        }
        if self.spreading != Spreading::UNDEFINED {
            os.write_enum(5, self.spreading.value())?;
        }
        if self.coderate != Coderate::UNDEFINED {
            os.write_enum(6, self.coderate.value())?;
        }
        if self.invert_polarity != false {
            os.write_bool(7, self.invert_polarity)?;
        }
        if self.omit_crc != false {
            os.write_bool(8, self.omit_crc)?;
        }
        if self.implicit_header != false {
            os.write_bool(9, self.implicit_header)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(10, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TxPacket {
        TxPacket::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "freq",
                    |m: &TxPacket| { &m.freq },
                    |m: &mut TxPacket| { &mut m.freq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Radio>>(
                    "radio",
                    |m: &TxPacket| { &m.radio },
                    |m: &mut TxPacket| { &mut m.radio },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "power",
                    |m: &TxPacket| { &m.power },
                    |m: &mut TxPacket| { &mut m.power },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Bandwidth>>(
                    "bandwidth",
                    |m: &TxPacket| { &m.bandwidth },
                    |m: &mut TxPacket| { &mut m.bandwidth },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Spreading>>(
                    "spreading",
                    |m: &TxPacket| { &m.spreading },
                    |m: &mut TxPacket| { &mut m.spreading },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Coderate>>(
                    "coderate",
                    |m: &TxPacket| { &m.coderate },
                    |m: &mut TxPacket| { &mut m.coderate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "invert_polarity",
                    |m: &TxPacket| { &m.invert_polarity },
                    |m: &mut TxPacket| { &mut m.invert_polarity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "omit_crc",
                    |m: &TxPacket| { &m.omit_crc },
                    |m: &mut TxPacket| { &mut m.omit_crc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "implicit_header",
                    |m: &TxPacket| { &m.implicit_header },
                    |m: &mut TxPacket| { &mut m.implicit_header },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &TxPacket| { &m.payload },
                    |m: &mut TxPacket| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TxPacket>(
                    "TxPacket",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TxPacket {
        static mut instance: ::protobuf::lazy::Lazy<TxPacket> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TxPacket,
        };
        unsafe {
            instance.get(TxPacket::new)
        }
    }
}

impl ::protobuf::Clear for TxPacket {
    fn clear(&mut self) {
        self.freq = 0;
        self.radio = Radio::R0;
        self.power = 0;
        self.bandwidth = Bandwidth::UNDEFINED;
        self.spreading = Spreading::UNDEFINED;
        self.coderate = Coderate::UNDEFINED;
        self.invert_polarity = false;
        self.omit_crc = false;
        self.implicit_header = false;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TxPacket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxPacket {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Radio {
    R0 = 0,
    R1 = 1,
}

impl ::protobuf::ProtobufEnum for Radio {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Radio> {
        match value {
            0 => ::std::option::Option::Some(Radio::R0),
            1 => ::std::option::Option::Some(Radio::R1),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Radio] = &[
            Radio::R0,
            Radio::R1,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Radio", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Radio {
}

impl ::std::default::Default for Radio {
    fn default() -> Self {
        Radio::R0
    }
}

impl ::protobuf::reflect::ProtobufValue for Radio {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Spreading {
    UNDEFINED = 0,
    SF7 = 1,
    SF8 = 2,
    SF9 = 3,
    SF10 = 4,
    SF11 = 5,
    SF12 = 6,
}

impl ::protobuf::ProtobufEnum for Spreading {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Spreading> {
        match value {
            0 => ::std::option::Option::Some(Spreading::UNDEFINED),
            1 => ::std::option::Option::Some(Spreading::SF7),
            2 => ::std::option::Option::Some(Spreading::SF8),
            3 => ::std::option::Option::Some(Spreading::SF9),
            4 => ::std::option::Option::Some(Spreading::SF10),
            5 => ::std::option::Option::Some(Spreading::SF11),
            6 => ::std::option::Option::Some(Spreading::SF12),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Spreading] = &[
            Spreading::UNDEFINED,
            Spreading::SF7,
            Spreading::SF8,
            Spreading::SF9,
            Spreading::SF10,
            Spreading::SF11,
            Spreading::SF12,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Spreading", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Spreading {
}

impl ::std::default::Default for Spreading {
    fn default() -> Self {
        Spreading::UNDEFINED
    }
}

impl ::protobuf::reflect::ProtobufValue for Spreading {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Bandwidth {
    UNDEFINED = 0,
    BW7_8kHz = 1,
    BW15_6kHz = 2,
    BW31_2kHz = 3,
    BW62_5kHz = 4,
    BW125kHz = 5,
    BW250kHz = 6,
    BW500kHz = 7,
}

impl ::protobuf::ProtobufEnum for Bandwidth {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Bandwidth> {
        match value {
            0 => ::std::option::Option::Some(Bandwidth::UNDEFINED),
            1 => ::std::option::Option::Some(Bandwidth::BW7_8kHz),
            2 => ::std::option::Option::Some(Bandwidth::BW15_6kHz),
            3 => ::std::option::Option::Some(Bandwidth::BW31_2kHz),
            4 => ::std::option::Option::Some(Bandwidth::BW62_5kHz),
            5 => ::std::option::Option::Some(Bandwidth::BW125kHz),
            6 => ::std::option::Option::Some(Bandwidth::BW250kHz),
            7 => ::std::option::Option::Some(Bandwidth::BW500kHz),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Bandwidth] = &[
            Bandwidth::UNDEFINED,
            Bandwidth::BW7_8kHz,
            Bandwidth::BW15_6kHz,
            Bandwidth::BW31_2kHz,
            Bandwidth::BW62_5kHz,
            Bandwidth::BW125kHz,
            Bandwidth::BW250kHz,
            Bandwidth::BW500kHz,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Bandwidth", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Bandwidth {
}

impl ::std::default::Default for Bandwidth {
    fn default() -> Self {
        Bandwidth::UNDEFINED
    }
}

impl ::protobuf::reflect::ProtobufValue for Bandwidth {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Coderate {
    UNDEFINED = 0,
    CR4_5 = 1,
    CR4_6 = 2,
    CR4_7 = 3,
    CR4_8 = 4,
}

impl ::protobuf::ProtobufEnum for Coderate {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Coderate> {
        match value {
            0 => ::std::option::Option::Some(Coderate::UNDEFINED),
            1 => ::std::option::Option::Some(Coderate::CR4_5),
            2 => ::std::option::Option::Some(Coderate::CR4_6),
            3 => ::std::option::Option::Some(Coderate::CR4_7),
            4 => ::std::option::Option::Some(Coderate::CR4_8),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Coderate] = &[
            Coderate::UNDEFINED,
            Coderate::CR4_5,
            Coderate::CR4_6,
            Coderate::CR4_7,
            Coderate::CR4_8,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Coderate", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Coderate {
}

impl ::std::default::Default for Coderate {
    fn default() -> Self {
        Coderate::UNDEFINED
    }
}

impl ::protobuf::reflect::ProtobufValue for Coderate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rgateway.proto\x12\0\"\x86\x02\n\x08RxPacket\x12\x0e\n\x04freq\x18\
    \x01\x20\x01(\rB\0\x12\x12\n\x08if_chain\x18\x02\x20\x01(\rB\0\x12\x13\n\
    \tcrc_check\x18\x03\x20\x01(\x08B\0\x12\x13\n\ttimestamp\x18\x04\x20\x01\
    (\x04B\0\x12\x17\n\x05radio\x18\x05\x20\x01(\x0e2\x06.RadioB\0\x12\x1f\n\
    \tbandwidth\x18\x06\x20\x01(\x0e2\n.BandwidthB\0\x12\x1f\n\tspreading\
    \x18\x07\x20\x01(\x0e2\n.SpreadingB\0\x12\x1d\n\x08coderate\x18\x08\x20\
    \x01(\x0e2\t.CoderateB\0\x12\x0e\n\x04rssi\x18\t\x20\x01(\x02B\0\x12\r\n\
    \x03snr\x18\n\x20\x01(\x02B\0\x12\x11\n\x07payload\x18\x0b\x20\x01(\x0cB\
    \0:\0\"\x84\x02\n\x08TxPacket\x12\x0e\n\x04freq\x18\x01\x20\x01(\rB\0\
    \x12\x17\n\x05radio\x18\x02\x20\x01(\x0e2\x06.RadioB\0\x12\x0f\n\x05powe\
    r\x18\x03\x20\x01(\x05B\0\x12\x1f\n\tbandwidth\x18\x04\x20\x01(\x0e2\n.B\
    andwidthB\0\x12\x1f\n\tspreading\x18\x05\x20\x01(\x0e2\n.SpreadingB\0\
    \x12\x1d\n\x08coderate\x18\x06\x20\x01(\x0e2\t.CoderateB\0\x12\x19\n\x0f\
    invert_polarity\x18\x07\x20\x01(\x08B\0\x12\x12\n\x08omit_crc\x18\x08\
    \x20\x01(\x08B\0\x12\x19\n\x0fimplicit_header\x18\t\x20\x01(\x08B\0\x12\
    \x11\n\x07payload\x18\n\x20\x01(\x0cB\0:\0*\x19\n\x05Radio\x12\x06\n\x02\
    R0\x10\0\x12\x06\n\x02R1\x10\x01\x1a\0*U\n\tSpreading\x12\r\n\tUNDEFINED\
    \x10\0\x12\x07\n\x03SF7\x10\x01\x12\x07\n\x03SF8\x10\x02\x12\x07\n\x03SF\
    9\x10\x03\x12\x08\n\x04SF10\x10\x04\x12\x08\n\x04SF11\x10\x05\x12\x08\n\
    \x04SF12\x10\x06\x1a\0*\x81\x01\n\tBandwidth\x12\r\n\tUNDEFINED\x10\0\
    \x12\x0c\n\x08BW7_8kHz\x10\x01\x12\r\n\tBW15_6kHz\x10\x02\x12\r\n\tBW31_\
    2kHz\x10\x03\x12\r\n\tBW62_5kHz\x10\x04\x12\x0c\n\x08BW125kHz\x10\x05\
    \x12\x0c\n\x08BW250kHz\x10\x06\x12\x0c\n\x08BW500kHz\x10\x07\x1a\0*G\n\
    \x08Coderate\x12\r\n\tUNDEFINED\x10\0\x12\t\n\x05CR4_5\x10\x01\x12\t\n\
    \x05CR4_6\x10\x02\x12\t\n\x05CR4_7\x10\x03\x12\t\n\x05CR4_8\x10\x04\x1a\
    \0B\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
